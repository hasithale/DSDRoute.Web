@model DSDRoute.Models.Product
@{
    ViewData["Title"] = "Edit Product";
}

<div class="fade-in-up">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="text-gradient fw-bold mb-1">
                <i class="fas fa-edit me-3"></i>Edit Product
            </h1>
            <p class="text-muted mb-0">Update product information and inventory settings</p>
        </div>
        <div class="d-flex gap-2">
            <a class="modern-btn modern-btn-outline" asp-action="Details" asp-route-id="@Model.Id">
                <i class="fas fa-eye me-2"></i>View Details
            </a>
            <a class="modern-btn modern-btn-outline" asp-action="Index">
                <i class="fas fa-arrow-left me-2"></i>Back to Products
            </a>
        </div>
    </div>

    <!-- Form Card -->
    <div class="modern-card">
        <div class="modern-card-header">
            <h5 class="mb-0">
                <i class="fas fa-box me-2"></i>Update Product Information
            </h5>
        </div>
        <div class="modern-card-body">
            <form asp-action="Edit" method="post">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="CreatedDate" />
                
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                
                <div class="row">
                    <div class="col-md-8 mb-3">
                        <label asp-for="Name" class="modern-form-label">Product Name *</label>
                        <input asp-for="Name" class="form-control modern-form-control" placeholder="Enter product name" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label asp-for="SKU" class="modern-form-label">SKU *</label>
                        <input asp-for="SKU" class="form-control modern-form-control" placeholder="Enter SKU code" />
                        <span asp-validation-for="SKU" class="text-danger"></span>
                        <small class="text-muted">Changing SKU may affect existing orders</small>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label asp-for="Price" class="modern-form-label">Unit Price *</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input asp-for="Price" type="number" step="0.01" class="form-control modern-form-control" placeholder="0.00" />
                        </div>
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label asp-for="StockQty" class="modern-form-label">Stock Quantity *</label>
                        <input asp-for="StockQty" type="number" class="form-control modern-form-control" placeholder="Enter quantity" />
                        <span asp-validation-for="StockQty" class="text-danger"></span>
                        @if (Model.StockQty <= 10)
                        {
                            <small class="text-warning">
                                <i class="fas fa-exclamation-triangle me-1"></i>Low stock alert
                            </small>
                        }
                    </div>
                    <div class="col-md-4 mb-3">
                        <label asp-for="Category" class="modern-form-label">Category</label>
                        <select asp-for="Category" class="form-select modern-form-control">
                            <option value="">Select category</option>
                            <option value="Beverages">Beverages</option>
                            <option value="Snacks">Snacks</option>
                            <option value="Dairy">Dairy Products</option>
                            <option value="Bakery">Bakery Items</option>
                            <option value="Frozen">Frozen Foods</option>
                            <option value="Personal Care">Personal Care</option>
                            <option value="Household">Household Items</option>
                            <option value="Other">Other</option>
                        </select>
                        <span asp-validation-for="Category" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="modern-form-label">Description</label>
                    <textarea asp-for="Description" class="form-control modern-form-control" rows="4" placeholder="Enter product description (optional)"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                        <label asp-for="IsActive" class="form-check-label modern-form-label">
                            Active Product
                        </label>
                        <span asp-validation-for="IsActive" class="text-danger"></span>
                    </div>
                    <small class="text-muted">Inactive products won't appear in order selection</small>
                </div>

                <!-- Current Status Info -->
                <div class="alert alert-info d-flex align-items-center mb-4">
                    <div class="me-3">
                        @if (Model.IsActive)
                        {
                            <i class="fas fa-check-circle text-success fs-4"></i>
                        }
                        else
                        {
                            <i class="fas fa-pause-circle text-warning fs-4"></i>
                        }
                    </div>
                    <div>
                        <div class="fw-semibold">Current Status: @(Model.IsActive ? "Active" : "Inactive")</div>
                        <small>
                            @if (Model.IsActive)
                            {
                                <span>This product is currently active and available for orders.</span>
                            }
                            else
                            {
                                <span>This product is currently inactive and not available for new orders.</span>
                            }
                        </small>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div>
                        <small class="text-muted">
                            <i class="fas fa-calendar me-1"></i>
                            Created: @Model.CreatedDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                        </small>
                    </div>
                    <div class="d-flex gap-3">
                        <a class="modern-btn modern-btn-outline" asp-action="Details" asp-route-id="@Model.Id">
                            <i class="fas fa-times me-2"></i>Cancel
                        </a>
                        <button type="submit" class="modern-btn modern-btn-primary">
                            <i class="fas fa-save me-2"></i>Update Product
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Product Statistics Card -->
    <div class="modern-card mt-4">
        <div class="modern-card-body">
            <h6 class="fw-bold mb-3">
                <i class="fas fa-chart-line me-2"></i>Product Performance
            </h6>
            <div class="row">
                <div class="col-md-3 mb-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div style="width: 40px; height: 40px; background: rgba(102, 126, 234, 0.1); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-shopping-cart" style="color: #667eea;"></i>
                            </div>
                        </div>
                        <div>
                            <div class="fw-semibold">Total Sold</div>
                            <div class="text-muted">@Model.OrderItems.Sum(oi => oi.Quantity) units</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div style="width: 40px; height: 40px; background: rgba(40, 167, 69, 0.1); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-dollar-sign" style="color: #28a745;"></i>
                            </div>
                        </div>
                        <div>
                            <div class="fw-semibold">Revenue</div>
                            <div class="text-muted">Rs. @(Model.OrderItems.Sum(oi => oi.Quantity * oi.Price).ToString("0.00"))</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div style="width: 40px; height: 40px; background: rgba(220, 53, 69, 0.1); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-undo" style="color: #dc3545;"></i>
                            </div>
                        </div>
                        <div>
                            <div class="fw-semibold">Returns</div>
                            <div class="text-muted">@Model.Returns.Sum(r => r.Quantity) units</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div style="width: 40px; height: 40px; background: rgba(253, 126, 20, 0.1); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-boxes" style="color: #fd7e14;"></i>
                            </div>
                        </div>
                        <div>
                            <div class="fw-semibold">Stock Level</div>
                            <div class="text-muted">
                                @if (Model.StockQty > 10)
                                {
                                    <span class="text-success">@Model.StockQty units</span>
                                }
                                else if (Model.StockQty > 0)
                                {
                                    <span class="text-warning">@Model.StockQty units</span>
                                }
                                else
                                {
                                    <span class="text-danger">Out of stock</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Form validation and UX enhancements
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            const stockInput = document.querySelector('input[name="StockQty"]');
            const priceInput = document.querySelector('input[name="Price"]');
            
            // Real-time validation feedback
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() === '') {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid') && this.value.trim() !== '') {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            });

            // Stock level warning
            if (stockInput) {
                stockInput.addEventListener('input', function() {
                    const value = parseInt(this.value);
                    const warning = this.parentElement.querySelector('.text-warning');
                    
                    if (value <= 10 && value > 0) {
                        if (!warning) {
                            const small = document.createElement('small');
                            small.className = 'text-warning';
                            small.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>Low stock alert';
                            this.parentElement.appendChild(small);
                        }
                    } else if (warning) {
                        warning.remove();
                    }
                });
            }

            // Price validation
            if (priceInput) {
                priceInput.addEventListener('input', function() {
                    const value = parseFloat(this.value);
                    if (value < 0) {
                        this.value = 0;
                    }
                });
            }

            // Status change confirmation
            const statusCheckbox = document.querySelector('input[type="checkbox"][asp-for="IsActive"]');
            const originalStatus = statusCheckbox.checked;
            
            form.addEventListener('submit', function(e) {
                if (statusCheckbox.checked !== originalStatus) {
                    const newStatus = statusCheckbox.checked ? 'active' : 'inactive';
                    if (!confirm(`This will change the product status to ${newStatus}. Continue?`)) {
                        e.preventDefault();
                        return false;
                    }
                }
            });
        });
    </script>
}